spring.application.name=persan-api

# PostgreSQL connection config
spring.datasource.url=jdbc:postgresql://localhost:5432/persanDb
spring.datasource.username=persanUser
spring.datasource.password=HE0461zLkk202513
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

spring.main.allow-bean-definition-overriding=true

# Configuration JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false

logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type=TRACE
server.port=8090

# JWT configuration
bezkoder.app.jwtCookieName=bezkoder
bezkoder.app.jwtSecret=bezKoderSecretKey
bezkoder.app.jwtExpirationMs=86400000

# JWT Configuration
jwt.secret=mETOrtionaliNdWilTINtOMElitaNtAndSKuLEniANOlYuptIO
jwt.token-validity-ms=31536000000

logging.level.org.springframework.security=DEBUG
logging.level.com.certification=DEBUG
logging.level.org.thymeleaf=DEBUG

spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=your_email@gmail.com
spring.mail.password=your_email_password
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.default-from=your_email@gmail.com

# File upload configuration
file.upload-dir=uploads/
# file.base-url=http://localhost:8086/api/files
file.base-url=http://24.144.65.121:8086/api/files

spring.mvc.static-path-pattern=/api/files/**
spring.web.resources.static-locations=file:/path/to/your/files/

spring.security.user.name=defaultUser
spring.security.user.password=e847dab7-7c81-48bb-92cc-a262ac7e0966

logging.level.root=INFO
logging.level.accident_report.accident_report_api=DEBUG

spring.devtools.restart.enabled=false

spring.data.web.pageable.default-page-size=10
spring.data.web.pageable.max-page-size=100

spring.main.allow-circular-references=true


# thymeleaf templates config
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false

# Gemini config
gemini.api.key=AIzaSyDTWX8ULlM02ItSOVaT6nEJ4kDdNeFAsM0
gemini.prompt.base=Vous êtes un expert en entomologie et dératisation. Analysez rigoureusement les informations fournies (texte et/ou image) pour :\n\n\
1. Extraire UNIQUEMENT les éléments demandés dans ce format JSON EXACT :\n\
{\n\
  "nomScientifique": "(nom binomial latin, obligatoire)",\n\
  "nomCommun": "[liste en français, anglais, espagnol]",\n\
  "typeNuisible": "[insecte/rongeur/autre]",\n\
  "descriptionMorphologique": {\n\
    "tailleCm": "[fourchette]",\n\
    "couleur": "[principales]",\n\
    "caracteristiques": "[antennes, pattes, ailes...]"\n\
  },\n\
  "risques": {\n\
    "sanitaires": "[maladies transmises]",\n\
    "materiels": "[types de dommages]",\n\
    "economiques": "[coûts moyens]"\n\
  },\n\
  "signesInfestation": "[excréments, traces, nids...]",\n\
  "conseilsExpert": {\n\
    "prevention": "[mesures proactives]",\n\
    "eradication": "[méthodes validées]",\n\
    "urgence": "[niveau 1-5]"\n\
  },\n\
  "certitudeIdentification": "[pourcentage%]"\n\
}\n\n\
2. Règles strictes :\n\
- Pas de markdown, uniquement du JSON valide\n\
- Image prioritaire sur texte en cas de contradiction\n\
- Ne rien inventer (mettre "Non applicable" si inconnu)\n\
- Unités métriques uniquement\n\
- Précision scientifique (ex: "Blattella germanica" pas "cafard")\n\n\
3. Validation :\n\
- Vérifier la cohérence taxonomique\n\
- Croiser avec la distribution géographique\n\
- Corréler caractéristiques morphologiques et comportementales\n\n\
Exemple pour un rongeur :\n\
{\n\
  "nomScientifique": "Rattus norvegicus",\n\
  "nomCommun": ["rat surmulot", "brown rat", "rata parda"],\n\
  ...\n\
  "certitudeIdentification": "95%"\n\
}
